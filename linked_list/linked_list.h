#ifndef LINKED_LIST_H
#define LINKED_LIST_H

#include <stdbool.h>

typedef int Element;
typedef struct linked_list_t *LinkedList;

/**********************************************************
 * create: 
 **********************************************************/
LinkedList create();

/**********************************************************
 * destroy: 
 **********************************************************/
void destroy(LinkedList list);

/**********************************************************
 * add_to_list: 
 **********************************************************/
bool add_to_list(LinkedList list, int index, Element e);

/**********************************************************
 * remove_from_list:
 **********************************************************/
Element remove_from_list(LinkedList list, int index);

/**********************************************************
 * set:
 **********************************************************/
Element set(LinkedList list, int index, Element e);

/**********************************************************
 * get:
 **********************************************************/
Element get(LinkedList list, int index);

/**********************************************************
 * get_index:
 **********************************************************/
int get_index(LinkedList list, Element e);

/**********************************************************
 * size:
 **********************************************************/
int size(LinkedList list);

/**********************************************************
 * is_empty:
 **********************************************************/
bool is_empty(LinkedList list);

/**********************************************************
 * clear:
 **********************************************************/
void clear(LinkedList list);

/**********************************************************
 * print_list:
 **********************************************************/
void print_list(LinkedList list);

#endif